import hashlib
import hmac
import requests
import time
from operator import itemgetter
from helpers import date_to_milliseconds, interval_to_milliseconds
#from exceptions import BinanceAPIException, BinanceRequestException, BinanceWithdrawException
from exceptions import *


para = []
with open('private/conf.txt', 'r') as f:
    for line in f.readlines():
        para.append(line.strip())

API_SECRET=para[1]

def order_params(data):
    has_signature = False
    params = []
    for key, value in data.items():
        if key == 'signature':
            has_signature = True
        else:
            params.append((key, value))
    # sort parameters by key
    params.sort(key=itemgetter(0))
    if has_signature:
        params.append(('signature', data['signature']))
    return params


def generate_signature(data):
    ordered_data = order_params(data)
    query_string = '&'.join(["{}={}".format(d[0], d[1]) for d in ordered_data])
    m = hmac.new(API_SECRET.encode('utf-8'), query_string.encode('utf-8'), hashlib.sha256)
    return m.hexdigest()
